
Status of gallery benchmarks:

benchmarks/gallery/compress.sk:
  Type: BIT
  yices2.int: 2m13s
  yices1.int: 23m47s
  stp.int: 1m26s
  z3.int: 1m30s
  minisat: Over 2 hours before I gave up, but memory is okay.
  sketch: 1m31s

  Profiling for yices2 int:
    28% Solve
    70% EvalS 
      The primitive Int operations are called a lot, especially from the shift
      operation, which has a partially concrete shift amount.

benchmarks/gallery/jburnim_morton.sk:
  Type: BIT
  yices2.int: 4m29s
  yices1.int: 6m53s
  stp.int: 1m33s
  z3.int: 3m35s
  minisat.int: 40m37s
  sketch: 9s

  Profiling for yices2 int:
    33% Solve
     7% Build
     3% Assert
    48% shlB.
  This is very much like compress. A repeated partial shift amount.

benchmarks/gallery/logcount.sk:
  Type: BIT
  yices2.int: 0m15s
  yices1.int: 1m08s
  stp.int: 2m28s
  z3.int: 9m50s
  minisat.int: I gave up waiting after 45 minutes.
  sketch: 5m01s

  Profiling for yices2 int:
    25% Solve
     6% Build
     3% Assert
  This is like compress and morton, except the shift is a right shift of
  unknown amount.

benchmarks/gallery/parity.sk:
  Type: BIT
  yices2.int: 1s
  yices1.int: 4s
  stp.int: 8s
  z3.int: 4s
  minisat.int: 7s
  sketch: 9s
 
  Profiling for yices1 int:
  This is like all the others, with a shift left.

benchmarks/gallery/polynomial.sk:
  Type: Bit
  yices2.int: 1s
  yices1.int: 1s
  stp.int: 1s
  z3.int: 1s
  minisat.int: 1s
  sketch: 1s

  It's not worth profiling.

benchmarks/gallery/tutorial1.sk
  Type: Int
  yices2.int: 1s
  yices1.int: 1s
  stp.int: 1s
  z3.int: 1s
  minisat.int: 1s
  sketch: 1s

  It's not worth profiling.

benchmarks/gallery/SetTest.cpped.sk:
  Type: Data
  This uses an uninterpreted function for the hash function of a hash table.
  My implementation does not support uninterpreted functions, so I will not
  use this benchmark.

benchmarks/gallery/diagStencil.sk:
  Type: STENCIL
  This uses stencils and floats, which I don't support.
  I will not use this benchmark.

benchmarks/gallery/diagStencilClean.sk: STENCIL
  Type: STENCIL
  This uses stencils and floats, which I don't support.
  I will not use this benchmark.

benchmarks/gallery/enqueueSeqSK.sk
  Type: DATA
  Note: this used "minrepeat", which I don't support. I have replaced
  that with "repeat (??)" instead, which I do support.

  see doc/perf15.txt

  int: The memory of this blows up searching for a counter example.
  sketch: 1s

  There's some issue with looking up a symbolic key in a symbolic map.
  I don't entirely understand it. traceS would help.

benchmarks/gallery/registerlesSwap.sk:
  Type: Bit
  Note: this used "minrepeat", which I don't support. I have replaced
  that with "repeat (??)" instead, which I do support. It's a little silly,
  because the whole point of the test case is to find the smallest, but that's
  what I can do for now.

  int: 1s (solver doesn't matter)
  sketch: 1s

benchmarks/gallery/karatsuba.sk:
  Type: Int
  This benchmark requires support for array lengths which are passed as
  arguments to functions, which I don't currently support.
  It's not convenient to manually rewrite this like signedAvg.sk because it
  re-uses functions with a variety of different lengths.
  Though it does appear those lengths are all statically known, so 
  we could statically inline it in theory.

benchmarks/gallery/signedAvg.sk
  Type: Bit
  Note: This benchmark was modified to avoid use of passing array lengths
  as arguments. This doesn't change anything significant, because the array
  length was statically known anyway.

  see doc/perf17.txt

  int: The memory of this blows up in verification.
  sketch: 10s

  Something funny is going on. I'm not sure what.

benchmarks/gallery/tableBasedAddition.sk:
  Type: Bit
  Note: This was modified by manually doing the static inline of W * (1 << W*2);

  see perf10.txt

  yices2.int: 1m17s
  yices2.bit: about 3 minutes
  sketch: 4s

benchmarks/gallery/log2.sk:
  Type: Bit
  Notes:
    * I made a minor change to fix a parse issue with global vars.
      It doesn't change anything significant.
    * I changed a repeat(n) loop to a for loop. This is to overcome current
      limitations in my sketch implementation for detecting static bounds.
      The meaning of the program is otherwise entirely unchanged.

  see doc/perf14.txt

  yices2.int: 49s
  yices1.int: 3m08s
  stp.int: 3m03s
  z3.int: 3m04s
  minisat.int: 56m58s
  sketch: 15m23s

  Profile on yices2:
    9% Solve
    It's pretty spread out otherwise. ShrE and ArrayAccess are prominent.


benchmarks/gallery/partition.cpped.sk: LOCAL_GEN
benchmarks/gallery/sort.included.sk(INT): LOCAL_GEN

benchmarks/gallery/Pollard.sk:
  Type: Int

  see doc/perf13.txt
 
  int: memory blowup searching for candidate
  This is because we don't statically bound the loop unrolling (as we should
  according to the sketch language definition), and there are some choices of
  holes for which the loops are infinite.
  If the loops are manually bounded, this solves immediately.

benchmarks/gallery/doublyLinkedList.sk:
  Type: DATA

  see doc/perf16.txt
  
  int: memory blowup searching for candidate program.
  Profile: No useful info.

  sketch: 1s

benchmarks/gallery/isolateRightmost.sk:
  Type: Bit

  yices2.int: 5s
  yices1.int: 2s
  z3.int: 3s
  stp.int: 3s
  minisat.int: 3s
  sketch: 3s

benchmarks/gallery/listReverse.sk:
  Type: DATA

  see doc/perf9.txt

  int: stack overflow
  sketch: 4m16s

  I don't know the problem: weird stuff is happening.

benchmarks/gallery/lss.sk:
  Type: Int

  see doc/perf11.txt

  yices2.int: memory blowup
  yices1.int: memory blowup
  z3.int: memory blowup
  sketch: 1s


  Looks like an issue with partially concrete name lookups? Maybe with
  symbolic char implementation?

benchmarks/gallery/reverse.sk:
  Type: Bit

  int.yices2: 39s
  int.yices1: 28s
  int.stp:  3m22s
  int.z3: 59s
  int.minisat: 29s
  sketch: 2s

  Profiling on int.yices2:
    20% Solve
    20% <=#
    33% shrB
    30% shlB

benchmarks/gallery/tutorial2.sk:
  Type: Int
  See doc/perf6.txt.
 
  yices2.int: 9s
  yices1.int: 2s
  stp.int: 8s
  z3.int: 2s
  minisat.int: 3s
  sketch: 1s

  Profiling on yices2: All the time is in multiplication: mul_IntFF, iii.
  Perhaps we could optimize: x * 0 = 0, x * 1 = x.
  That should save those couple of cases. Everything else will still be hard.
    

benchmarks/gallery/tutorial3.sk:
  Type: Int
  See doc/perf8.txt.

  int: blows up.
  Profiling says: All the time is in sub_intFF, iii.
  sketch: 9s

  bit: TODO: I suspect it will work?
  
 
benchmarks/gallery/xpose.sk:
  Type: Int

  int.yices2: Get's stuck (more than 640 minutes) on one query. Memory is okay.
  int.yices1: 17s
  int.stp: 58s
  int.z3: 15s
  int.minisat: 2m13s
  sketch: 16m06s


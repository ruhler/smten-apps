# 1 "SetTest.sk"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "SetTest.sk"


# 1 "TreeSet.skh" 1
struct TreeNode{
 int val;
 TreeNode left;
 TreeNode right;
}

TreeNode newTreeNode(int val){
 TreeNode tn = new TreeNode();
 tn.val = val;
 tn.left = null;
 tn.right = null;
 return tn;
}

struct Tree{
 TreeNode root;
}

Tree newTree(){
 Tree t = new Tree();
 t.root = null;
 return t;
}


generator bit choice(ref TreeNode n, int v){
 if({| n(.left | .right) |} == null){
  {| n(.left | .right) |} = newTreeNode(v);
  return ??;
 }else{
  n = {| n(.left | .right) |} ;
  return ??;
 }
}


bit addt(Tree t, int v){
 TreeNode n =t.root;
 if(n == null){
  t.root = newTreeNode(v);
  return ??;
 }
 while(n != null){
  if( n.val == v){ return ??; }
  if(n.val < v){
   if(choice(n, v)){
    return ??;
   }
  }else{
   if(choice(n, v)){
    return ??;
   }
  }
 }
 return ??;
}

bit containst(Tree t, int v){
 TreeNode n = t.root;
 while(n != null){
  if( n.val == v){ return ??; }
  if(n.val < v){
    n = n.left;
  }else{
    n = n.right;
  }
 }
 return ??;
}
# 4 "SetTest.sk" 2
# 1 "HashSetComplete.skh" 1

struct HashNode{
 HashNode next;
 int val;
}

HashNode newNode(int val){
 HashNode n = new HashNode();
 n.val = val;
 n.next = null;
 return n;
}

int HTSIZE = 10;

generator int hashB(int x);

generator int hash(int x){

 return hashB(x);
}



struct HashTable{
 HashNode[HTSIZE] table;
}

HashTable newHashTable(){
 HashTable ht = new HashTable();
 for(int i=0; i<HTSIZE; ++i){
  ht.table[i] = null;
 }
 return ht;
}

bit addh(HashTable ht, int v){
  int hv = hash(v);
  HashNode n = ht.table[ hv ];
  if( n == null){
   ht.table[hv] = newNode(v);
   return 0;
  }else{
   bit alreadyThere = 0;
   while( {| n | n.next |} != null){
    if(n.val == v){ alreadyThere = 1; }
    n = n.next;
   }
   if(alreadyThere == 0 && n.val != v){
    n.next = newNode(v);
    return 0;
   }
   return 1;
  }
}

bit containsh(HashTable ht, int v){
  int hv = hash(v) % HTSIZE;
  HashNode n = ht.table[ hv ];
  if( n == null){
   return 0;
  }else{
   if(n.val == v){ return 1; }
   while( {| n | n.next |} != null){
    if(n.val == v){ return 1; }
    n = n.next;
   }
   return 0;
  }
}
# 5 "SetTest.sk" 2

pragma options "--bnd-unroll-amnt 5 --bnd-inbits 3";


int T = 4;

harness void main(int[T] vals, int tval){

 HashTable ht = newHashTable();
 Tree t = newTree();
 for(int i=0; i<T; ++i){
  bit t1;
  t1 = addh(ht, vals[i]);
  bit t2;
  t2 = addt(t, vals[i]);
  assert t1 == t2;
 }


 for(int i=0; i<T; ++i){
  bit t1 = containsh(ht, vals[i]);
  bit t2 = containst(t, vals[i]);
  assert t1 && t2;
 }

 assert containsh(ht, tval) == containst(t, tval);


}

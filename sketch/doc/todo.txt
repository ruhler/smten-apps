Priority::
* Re-design type checking for arrays
  Assuming width is not checked statically.
* Brainstorm how to support global variables properly in general.
* Brainstorm how to support local function declarations properly.

Features::
STRUCTS
  * Support unboxed structs, with syntax |Foo| for the type.

UNINTERPRETED_FUNCTION
  * Support: int moo(int x);   at top level.
  Not sure how to implement this.
  Maybe: replace each call moo(x) with a new free variable y.
         collect all the pairs (x, y) used during execution,
         and at the end assert they have the function property:
  if x0 = x1 then y0 = y1
  if x0 = x2 then y0 = y2
  if x1 = x2 then y1 = y2
  etc...

UNKNOWN_N
  * Support unknown array bounds?
  This happens when N is used for an array width, and where N is a dynamic
  value (computed locally, or an input to the function).

  The real question is: why do we have to evaluate N statically?
  When do we need to know the width of an array statically?

  If we don't, then I say just don't evaluate it statically, then everything
  should work fine.

  Reasons we need the width statically known:
  * CastE will need to evaluate the width (this can be done dynamically)
  * icast needs the width evaluated (this can be done dynamically)
  * mkFreeArg needs to know the width
     So there is some dependency in the order you do mkFreeArg:
      Scalars first, then arrays?
      Can it even be sorted in some reasonable order?
  * to check bulk update width bounds statically (we can just skip this I suppose)
  * to statically pad array values (why not do this dynamically?)
  * to statically check array widths (we can just skip this?)
  * to properly pad an array

  In summary, looks like the only problem is with mkFreeArg, trying to order
  the arguments properly. Perhaps I can assume the go left to right and be
  okay. I just need to put previous arguments in scope of later arguments.
  Yes: I double checked, this is what the language reference says.
  The scope of the type is: arguments to the left. And all arguments are in
  the scope of the output type.

  Steps to fix:
  1. Remove static evaluation of types, and fix problems so that all test
     cases still work.
  2. Do the fix to mkFreeArg
  That's it. Everything should work out fine then.

  Actually: I should think some more about how to deal with arrays.
   Idea: We pad when we make an ArrayV based on desired type, and don't do
         any other implicit cast between arrays of the same value type (but
         possibly different widths?)
  The difficulty is: we want to avoid putting implicit casts everywhere, but
  we want to ensure an implicit cast where needed. Can I check? Is it true you
  can only have implicit casts when doing an assignment? Then maybe for arrays
  we just always insert an implicit cast for an assignment, and never any
  other time.

CLOSURES
  Support local functions.
  Notes:
  * local functions can modify functions in the scope of the context in which
    they are defined
  How should this be implemented?

  Note, generators can be local too. Is that easier to implement?
  I suspect not.

  Here's an idea: Don't just have global and local scope. Have a nest of
  scopes, with shadowing. Functions won't access outside of their scopes
  (static evaluation should enforce this!)...
  No, that's problematic, because a shadowed variable could be unshadowed by
  adding another layer...

  Anyway, we need a way to change variables in different scopes than our
  current.

GLOBALS
  Support global variables properly.
  + Global scope should be modifiable (not read-only).
  * Global variables should be allowed to be holes.
    This means we need to do generate on global variable declarations.
  * Global variables need not have initial value (use default).
  * Syntax should support multiple global variable declarations.
  * Global variables may depend on the value of other global variables.
    We can assume those other variables come earlier in the source code.
  Here's what I propose.
  
  Collect all global value declarations as Decl statements, in order.
  Before executing the top level function, execute the Decl statements in a
  local scope. The resulting local scope is used as the initial global scope.

  Then have the global scope like localScope, and look up a variable there if
  it isn't in the local scope. Easy.

  Note: I suspect this will be easier to implement after array widths are
  removed from consideration in static evaluation.


FLOATS
  Support double and float.

STATIC_EVAL::
  Evaluate local variables statically if possible.
  Because we might have:
    int x = foo(K);
    bit[x] bar = ...
  So we have to inline x to know the type of bar.
  Question: don't we already have some infrastructure for this?
  Question: perhaps an alternate approach would be to allow dynamic
    array lengths in general?
  Operations to support at least:
    * multiplication, addition
    * left shift
    * constant variable
  Other things to do:
    * Keep track of values in the type environment if we have them statically

INSERT_INTO
  insert and into statements? What do those mean?

TYPEOFV_SLOW
 Looks like we are getting stuck in a false infinite finite formula.

INSERTVAR_SLOW
 Stuck in false symbolic execution?

STACK_OVERFLOW
 A mysterious stack overflow

Features needed, by test case::

Sketch Inconsistencies
----------------------
tests/broken/expectfail/uninitint.smten.sk:
  Sketch is not consistent about whether ints are initialized or not.
  I assume they are initialized.

tests/broken/miniTest78.sk: poor type bit literal
  Sketch is not consistent about whether you can have:
     bit N = 5;
  In some contexts it says it's poorly typed, in other contexts it accepts
  it just fine. I think it's poorly typed.

tests/broken/bitarith.smten.sk, 
tests/broken/miniTestb215.sk,
tests/broken/miniTestb540.sk: bit supports + and -?
    The problem with these are, it's not clear what 1 + 1 is, or
    0 - 1 for bit. Then it's not clear that (-1) should be treated
    as an int, rather than a cast from (0 - 1) to an int, which would
    give the wrong result.    

Features Needed
---------------
tests/broken/miniTestb196.sk: support h_assert statement.
  After parsing of string literals is supported, probably just ignore the
  string argument and parse this as a normal assert.

tests/broken/miniTestb338.sk,
tests/broken/miniTest208Globals.sk,
tests/broken/miniTest209Globals.sk,
tests/broken/miniTestb399.sk,
tests/broken/miniTestb352.sk,
tests/broken/miniTestb442.sk,
tests/broken/miniTestb492.sk: GLOBALS
  Support use of global variables in normal code, not just type declarations.

tests/broken/miniTestb456.sk: Hole in type?
tests/broken/miniTestb231.sk: Hole in type?

tests/broken/miniTestb460.sk: minrepeat statement

tests/broken/miniTestb418.sk - empty array in initializer (parser bug)

tests/broken/annotations/*.sk: support @ annotations.
tests/broken/char/*.sk: CHAR_TYPE
tests/broken/cpp/*.sk: C preprocessor needed
tests/broken/double/*.sk: FLOATS
tests/broken/hfun/*.sk: higher order and local functions.
tests/broken/implicit/*.sk: implicit arguments
tests/broken/include/*.sk: include keyword
tests/broken/insertinto/*.sk: INSERT_INTO
tests/broken/package/*.sk: package keyword
tests/broken/static/*.sk: STATIC_EVAL
tests/broken/stencil/*.sk: stencil keyword
tests/broken/structs/*.sk: STRUCTS
tests/broken/uninterp/*.sk: UNINTERPRETED_FUNCTION
tests/broken/unknownN/*.sk: Global N not defined?

Performance Bugs
----------------
tests/broken/slow/perf6.sk: see doc/perf6.txt
tests/broken/slow/miniTest86.sk: ???
tests/broken/slow/miniTest92.sk:
  Actually finishes, just takes many iterations.
tests/broken/slow/miniTestb102.sk: TYPEOFV_SLOW
tests/broken/slow/miniTestb110.sk: INSERTVAR_SLOW
tests/broken/slow/miniTestb147.sk: (==) takes all time?
tests/broken/slow/miniTestb156.sk: ???
tests/broken/slow/miniTestb180.sk: takes many iterations
tests/broken/slow/miniTestb181.sk: arrsub takes all time?
tests/broken/slow/miniTestb182.sk: takes many iterations
tests/broken/slow/miniTestb189.sk: (==) takes all time?
tests/broken/slow/miniTestb216.sk: slow: dominated by updateLV?
tests/broken/slow/miniTestb218.sk: slow: TODO: look into why
tests/broken/slow/miniTestb226.sk: slow on yices1, fine on yices2
tests/broken/slow/miniTestb334.sk: STACK_OVERFLOW
tests/broken/slow/miniTestb390.sk: STACK_OVERFLOW
tests/broken/slow/regex/*.sk: slow regex examples
  Perhaps because we enumerate the whole space with ChoiceE before
  making it symbolic? Would it be better to represent the choices
  explicitly in the syntax and let symbolic merge things?

Gallery
-------
Finished::
gallery/compress.sk: FINISHES (2m8.537s)
gallery/jburnim_morton.sk: FINISHES (4m19.514s)
gallery/logcount.sk: FINISHES (14.785s)
gallery/parity.sk: FINISHES (0m0.717s)
gallery/polynomial.sk: FINISHES (0.384s)
gallery/tutorial1.sk: FINISHES (0m0.075s)

Unsupported::
gallery/SetTest.cpped.sk: UNINTERP
gallery/diagStencil.sk: STENCIL
gallery/diagStencilClean.sk: STENCIL
gallery/enqueueSeqSK.sk: MINREPEAT
gallery/registerlesSwap.sk:  MINREPEAT
gallery/karatsuba.sk: UNKNOWN_N
gallery/signedAvg.sk: UNKNOWN_N
gallery/tableBasedAddition.sk: STATIC
  Static evaluation on local variables:
  int exp = 1 << W*2;
  bit [W*exp] tmp = ...
gallery/log2.sk: comma in global DeclS:
   int W = 32, logW = 5;
gallery/partition.cpped.sk: LOCAL_GEN
gallery/sort.included.sk: LOCAL_GEN

Slow::
gallery/Pollard.sk: memory blowup
gallery/doublyLinkedList.sk: SLOW: memory blowup
gallery/isolateRightmost.sk: SLOW
  Looks like it's making an exponential tree of generators (tens of
  thousands), which is just leading to very large queries.
  Question: are generators inlined before or after regex choice?
  Answer: most likely before, but currently I do it after.
gallery/listReverse.sk: SLOW: memory blowup
gallery/lss.sk: SLOW: memory blowup
gallery/reverse.sk: SLOW
  looks like it will finish, just slow. Maybe 2 hours?
gallery/tutorial2.sk: SLOW: memory blowup
  Because of mix of counter-example choice and large size of ints.
  See doc/perf6.txt.
gallery/tutorial3.sk: SLOW: memory blowup
  Recursive generator blowup?
gallery/xpose.sk: SLOW: memory blowup
 

Clean::
* Static phase does a lot of duplicated type evaluation.
  Perhaps do type evaluation in a dependency order kind of way using a state
  monad?
* Understand and remove conflicts in parser. (see doc/parser.txt)
* TODO's inlined


Pretty Print::
* in type errors: pretty print types, don't just "show" them

Refactor Ideas::
* Do more stuff in Static pass
    * Loops can be unrolled properly if bounds known statically.
    * We can inline generator functions here.

Performance Ideas:: (consider only AFTER we run into performance problems)
* split a program into independent pieces if there are any?
* perform simplification at start to avoid re-evaluating things we know every
  iteration of the CEGIS loop?
    This would also help with implementing repeat properly, and static
    evaluation of types.
* do incremental unrolling on the size of inputs and holes we try?
* Use "random" solver for synthesis query?


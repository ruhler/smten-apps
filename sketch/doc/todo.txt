
* Pretty print bit vectors like arrays, not as integers!

Features::
RECURSIVE_GENERATOR
  - have a generator which calls itself depending on the input value.
    To deal with this:
        bound number of appearances of a function on the stack to
        --bnd-inline-amount. Assert no more are needed.
        So, if you exceed the limit, assert false and return error.

SCALAR_ARRAY
  * automatically promote arbitrary scalars to one element arrays
    if needed. Not just integer literal scalars.

ASSIGN_BUG
  * there is a bug in array assignment.
    Currently the implementation will assign a bigger array to a smaller by
    truncating, but that should be illegal.

    To fix this? I think we need to have type information at assignment at
    evaluation time. Is there an easy way to get this?

ARRAY_HOLE
  * int [8] fu = ??;  Should be allowed.

SUB_ARRAY
  * tmp[1::2] = ...;  Should be allowed.

MOD_OPERATOR
  * support: t % ?? for int type.

POST_DECR
  * support: i-- in for increment.

PRAGMA
  * support: pragma options "--bnd-intbits 6";

FAIL_NICELY
  * type errors sometimes cause things to hang rather than report the error.
    Is this a problem with smten?
    It's: do you want to treat error as anything, or raise errors right away,
    or what?

Features needed, by test case::
tests/broken/expectfail/assigntosmaller.smten.sk: ASSIGN_BUG
tests/broken/expectfail/gtbitsbits.smten.sk: FAIL_NICELY
tests/broken/miniTest3.sk: SCALAR_ARRAY
miniTest12.sk: RECURSIVE_GENERATOR
miniTest21.sk: CLAIMS UNSAT - not sure why
miniTest41.sk: SLOW? (It contains nested repeats of arbitrary depth)
miniTest43.sk: CLAIMS UNSAT - not sure why
miniTest44.sk: CLAIMS UNSAT - not sure why
miniTest45.sk: CLAIMS UNSAT - not sure why
miniTest46.sk: CLAIMS UNSAT - not sure why
miniTest49.sk: PRAGMA
miniTest50.sk: MOD_OPERATOR
miniTest51.sk: ARRAY_HOLE
miniTest52.sk: MOD_OPERATOR
miniTest53.sk: SUB_ARRAY
miniTest54.sk: SUB_ARRAY
miniTest55.sk: SUB_ARRAY
miniTest60.sk: SUB_ARRAY
miniTest62.sk: POST_DECR
miniTest63.sk: SLOW. Probably a type error that's being abstracted over.
miniTest67.sk: SCALAR_ARRAY
miniTest68.sk: SUB_ARRAY
miniTest69.sk: SUB_ARRAY
miniTest70.sk: SUB_ARRAY


Performance Ideas:: (consider only AFTER we run into performance problems)
* split a program into independent pieces if there are any?
* perform simplification at start to avoid re-evaluating things we know every
  iteration of the CEGIS loop?
* do incremental unrolling on the size of inputs and holes we try?
* 'repeat' does a lot of extra work.
    For example, it tries repeating 0 through 32, say.
    Which means, worst case, executing the statement 
    0 + 1 + 2 + 3 + 4 + 5 + ... + 32 times.
    But if we just conditionally execute the repeated statement, we could only
    need to execute it worst case 32 times, right? Nested repeats compound the
    issue.
    
Other Todo::
* make the pretty printer print prettier

Document Behaviors of sketch::
* if you call a function in two different sketches, are it's holes shared or
  duplicated? (that is, do we need to do everything at once, or one sketch at
  a time?)
* What happens to: ??[4] in terms of type inference?
    blows up
* what happens to: 7[2] in terms of type inference?
    blows up
* if you have a generate call inside a repeat block, is the generate call made
  repeatedly producing new holes each time, or is it called once with the same
  holes replicated?


Features::
RECURSIVE_GENERATOR
  - have a generator which calls itself depending on the input value.
    To deal with this:
        bound number of appearances of a function on the stack to
        --bnd-inline-amount. Assert no more are needed.
        So, if you exceed the limit, assert false and return error.

INTARRAY - int arrays

Features needed, by test case::
miniTest12.sk: RECURSIVE_GENERATOR
miniTest20.sk: INTARRAY
miniTest21.sk: INTARRAY
miniTest34.sk: INTARRAY
miniTest35.sk: INTARRAY
miniTest36.sk: INTARRAY
miniTest37.sk: INTARRAY
miniTest41.sk: SLOW? (It contains nested repeats of arbitrary depth)
miniTest43.sk: CLAIMS UNSAT - not sure why
miniTest44.sk: CLAIMS UNSAT - not sure why

Performance Ideas:: (consider only AFTER we run into performance problems)
* split a program into independent pieces if there are any?
* perform simplification at start to avoid re-evaluating things we know every
  iteration of the CEGIS loop?
* do incremental unrolling on the size of inputs and holes we try?
* 'repeat' does a lot of extra work.
    For example, it tries repeating 0 through 32, say.
    Which means, worst case, executing the statement 
    0 + 1 + 2 + 3 + 4 + 5 + ... + 32 times.
    But if we just conditionally execute the repeated statement, we could only
    need to execute it worst case 32 times, right? Nested repeats compound the
    issue.
    
Other Todo::
* make the pretty printer print prettier

Document Behaviors of sketch::
* if you call a function in two different sketches, are it's holes shared or
  duplicated? (that is, do we need to do everything at once, or one sketch at
  a time?)
* What happens to: ??[4] in terms of type inference?
    blows up
* what happens to: 7[2] in terms of type inference?
    blows up
* are < and > supported for bits?
* if you have a generate call inside a repeat block, is the generate call made
  repeatedly producing new holes each time, or is it called once with the same
  holes replicated?


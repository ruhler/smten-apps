Shampi
======
Richard Uhler <ruhler@csail.mit.edu>
June 2014

Introduction
------------
Shampi is a smten-based re-implementation of the HAMPI string constraint
solver available at http://hampi.googlecode.com.

Prerequisites
-------------
Shampi requires the happy parser generator and smten.

To install 'happy', use cabal:

  $ cabal install happy


Smten can be retrieved from:

  http://github.com/ruhler/smten

Note: you may need to add $HOME/.cabal/bin to your PATH environment variable
in order for the build scripts to find the installed versions of happy and
smten.

Building Shampi
---------------
To build shampi, run:

 $ make

This will build both release and profiling builds of shampi. The release
version can be found at build/release/shampi, and the profiling version can be
found at build/profile/shampi.

Running make will execute the unit tests cases.

Running Shampi
--------------
To run shampi, give it one or more hampi files on the command line.
For example:

  $ ./build/release/shampi tests/unit/ab1.hmp tests/unit/ab2.hmp
  > tests/unit/ab1.hmp: UNSAT
  > tests/unit/ab2.hmp: {VAR(str)=ab}

For each input file, shampi will output the result running on that file.

The -s option can be used to select a different solver. Currently supported
solvers are yices1, yices2, stp, minisat, and z3. For example:

  $ ./build/release/shampi -s yices2 tests/cfg/001.cfg.hmp
  > tests/cfg/001.cfg.hmp: {VAR(hampiStringVar)=aaababbbbabbaaabbabb}

  $ ./build/release/shampi -s z3 tests/cfg/001.cfg.hmp
  > tests/cfg/001.cfg.hmp: {VAR(hampiStringVar)=aaaaaaaaaaaaaabaaaaa}

The -e option can be used to select a different representation for characters.
Currently supported representation options are Integer, Bit, Char, and Int.
For example:

  $ ./build/release/shampi -e Int tests/cfg/001.cfg.hmp
  > tests/cfg/001.cfg.hmp: {VAR(hampiStringVar)=babababbabbbabbbabab}

  $ ./build/release/shampi -e Bit tests/cfg/001.cfg.hmp
  > tests/cfg/001.cfg.hmp: {VAR(hampiStringVar)=aaababbbbabbaaabbabb}

The -d option can be used to output the generated SMT query. For example:
  $ ./build/release/shampi -d ab2.dbg tests/unit/ab2.hmp
  > tests/unit/ab2.hmp: {VAR(str)=ab}

This outputs the query to the file ab2.dbg.
  

Test Cases and Benchmarks
-------------------------
The 'tests/' directory contains test cases and benchmarks for shampi.
The tests in tests/unit are used for unit tests. The remainder of the test
cases are benchmarks generated by the HAMPI distribution, sorted by category.

Evaluating Performance 
----------------------
The script 'utils/perf.tcl' runs shampi and the original HAMPI on each of the
benchmarks, excluding 'unit' tests and the 'buggy' tests. The script is
currently set to run 3 configurations:
1. The original HAMPI implementation. This assumes and requires
hampi_server.sh and hampi_client.sh from the original HAMPI are in $PATH.
2. Shampi using the stp solver and Bit type.
3. Shampi using the yices2 solver and Bit type.

The makefile target 'perf' runs each configuration 8 times on each benchmark,
and outputs the results to build/perf.data.

The makefile target 'perf_fast' does the same thing, but only runs each
configuration 1 time on each benchmark.

After either 'perf' or 'perf_fast' has been run, the makefile target 'graph'
will produce graphs build/hVstpb.pdf and build/hVy2b.pdf, comparing both
shampi configurations against the original HAMPI tool.

For example, to run fast performance numbers (takes about a minute):
  $ make perf_fast
  $ make graph

To run full performance numbers:
  $ make perf
  $ make graph

